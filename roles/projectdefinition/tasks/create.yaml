# Create a new project namespace and associated resources (groups,
# rolebindings, quotas).
#

- name: "{{ ansible_operator_meta.name }} : create namespace"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ ansible_operator_meta.name }}"

        # We put the description in display-name because this shows up
        # in the project list [1], although oddly enough it
        # *doesn't* show up in the project detail page. Sometimes
        # you just can't win.
        #
        # [1]: https://console-openshift-console.apps.ocp-prod.massopen.cloud/k8s/cluster/projects
        annotations:
          openshift.io/requester: "{{ requester }}"
          openshift.io/display-name: "{{ description|default(omit) }}"
        labels:
          massopen.cloud/project: "{{ ansible_operator_meta.name }}"

- name: "{{ ansible_operator_meta.name }} : create rolebindings"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: "{{ ansible_operator_meta.name }}-{{ role }}"
        namespace: "{{ ansible_operator_meta.name }}"
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: "{{ project_role_map[role] }}"
      subjects:
        - apiGroup: rbac.authorization.k8s.io
          kind: Group
          name: "{{ ansible_operator_meta.name }}-{{ role }}"
  loop_control:
    loop_var: role
  loop: "{{ project_role_map.keys()|list }}"

# This is here because I haven't been able to figure out how to declare
# mutually exclusive options in the OpenAPI v3 schema (see e.g.
# https://stackoverflow.com/q/72690407/147356).
- name: "{{ ansible_operator_meta.name }} : check for multiple quotas"
  when: >-
    quota.quotaName|default(false) and quota.quotaDefinition|default(false)
  fail:
    msg: "Only set one of quota.quotaName and quota.quotaDefinition"

- name: "{{ ansible_operator_meta.name }} : handle named quota"
  when: >-
    quota.quotaName|default(false)
  block:
    - name: "{{ ansible_operator_meta.name }} : look up named quota"
      kubernetes.core.k8s_info:
        api_version: "{{ apiVersion }}"
        kind: ProjectQuota
        name: "{{ quota.quotaName }}"
      register: named_quota

    - name: "{{ ansible_operator_meta.name }} : assert that quota exists"
      assert:
        that: named_quota.resources|length == 1
        fail_msg: "No quotaa named {{quota.quotaName}}"

    - name: "{{ ansible_operator_meta.name }} : label namespace"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ ansible_operator_meta.name }}"
            namespace: "{{ ansible_operator_meta.name }}"
            labels:
              massopen.cloud/named-quota: "{{ quota.quotaName }}"

    # Pass the spec from the ProjectQuota (which may contain both a
    # resourceQuota and a limitRange definition) to the apply-quota task list.
    - name: "{{ ansible_operator_meta.name }} : apply quota definition"
      include_tasks: apply-quota.yaml
      vars:
        quotadef: "{{ named_quota.resources[0].spec }}"

- name: "{{ ansible_operator_meta.name }} : handle custom quota"
  when: >-
    quota.quotaDefinition|default(false)
  block:
    - name: "{{ ansible_operator_meta.name }} : remove quota label"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ ansible_operator_meta.name }}"
            annotations:
              massopen.cloud/named-quota: null
              massopen.cloud/named-quota-hash: null

    - name: "{{ ansible_operator_meta.name }} : apply quota definition"
      include_tasks: apply-quota.yaml
      vars:
        # The ansible operator, for unknown reasons, likes to map camelCase
        # names to snake_case names [1], so we need to map them *back*
        # so that our quota definition has the expected keys.
        #
        # [1]: https://github.com/operator-framework/operator-sdk/issues/5887
        quotadef: "{{ quota.quotaDefinition }}"

- name: "{{ ansible_operator_meta.name }} : create groups"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: user.openshift.io/v1
      kind: Group
      metadata:
        name: "{{ ansible_operator_meta.name }}-{{ role }}"
        labels:
          massopen.cloud/project: "{{ ansible_operator_meta.name }}"
      users: "{{ rolemembers[role]|default([]) }}"
  vars:
    rolemembers:
      admin: "{{ admins | default([]) }}"
      member: "{{ members | default([]) }}"
      reader: "{{ readers | default([]) }}"
  loop_control:
    loop_var: role
  loop: "{{ project_role_map.keys()|list }}"
