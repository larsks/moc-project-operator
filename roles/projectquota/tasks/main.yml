# Respond to modifications to ProjectQuota resources.
#

# In order to trigger a reconcile of the associated project, we annotate
# the target namespace with the hash of the quota definition. This triggers
# a reconcile because of the ownerReference on the namespace, which then
# re-applies any quotas to the namespace.
- name: Calculate content_hash
  set_fact:
    content_hash: "{{ quotadef|to_json|hash('sha256') }}"
  vars:
    quotadef:
      q: "{{ resourceQuota|default({}) }}"
      l: "{{ limitRange|default({}) }}"

# We look for namespaces that have massopen.cloud/named-quota set
# to the name of the ProjectQuota we're currently processing.
- name: Look up affected namespaces
  kubernetes.core.k8s_info:
    api_version: v1
    kind: namespace
    label_selectors:
      - "massopen.cloud/named-quota = {{ ansible_operator_meta.name }}"
  register: namespaces

- name: Look up project definition
  kubernetes.core.k8s_info:
    api_version: "{{ apiVersion }}"
    kind: projectdefinition
    name: "{{ namespace.metadata.name }}"
  register: projectdefs
  loop: "{{ namespaces.resources }}"
  loop_control:
    loop_var: namespace
    label: "{{ namespace.metadata.name }}"

- name: Update namespaces
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ namespace.metadata.name }}"
        annotations:
          massopen.cloud/named-quota: "{{ ansible_operator_meta.name }}"
          massopen.cloud/named-quota-hash: "{{ content_hash }}"

  # Ensure both that (a) we found a ProjectDefinition matching the namespace
  # name, and that (b) that ProjectDefinition is configured to use the
  # ProjectQuota that triggered this Ansible run. This prevents us from accidentally
  # re-applying a named quota just because a label wasn't deleted correctly.
  when: >-
    item[1].resources|length == 1 and
    item[1].resources[0].spec.quota.quotaName|default("") == ansible_operator_meta.name
  vars:
    namespace: "{{ item[0] }}"
  loop: "{{ namespaces.resources|zip(projectdefs.results)|list }}"
  loop_control:
    label: "{{ item[0].metadata.name }}"
